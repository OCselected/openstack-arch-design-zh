<?xml version="1.0" ?><section version="5.0" xml:id="architecture-network-focus" xml:lang="zh" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>架构</title>
    <para>网络型的 OpenStack 架构与其他 OpenStack 架构场景具有很多相似之处。但是当设计一个以网络为主的或者重度依赖网络的应用环境时，有一些特别的因素需要考虑。</para>
    <para>网络是作为用以在系统之间传输数据的媒介存在的。一个 OpenStack 的架构设计不可避免地有着对 OpenStack 的非网络部分的内部依赖以及对外部系统的依赖。根据负载场景的不同，可能与 OpenStack 内部以及外部的存储系统有着较多的互动。例如，假如是一个内容分发网络，则与存储之间的互动将是双向的。南北向上将会有很多流量出入存储阵列以存放和提供内容。另外，在东西向上也将有用于复制的网络流量。</para>
    <para>重度依赖计算的负载也可能与网络有相互的影响。比如一些高性能计算应用依赖基于网络的内存映射和数据共享，其结果是当实例之间传输结果和数据集的时候会产生较高的网络负载。其他的一些应用也可能是高度事务性的，非常频繁的加上事务性锁，执行相应的工作，然后解锁。这也会影响到网络的性能。</para>
    <para>有些网络方面的依赖会是在 OpenStack 环境以外的。虽然 OpenStack 联网方式已经能够提供网络端口，IP 地址管理，某种程度上的路由功能，以及覆盖网络，仍然有一些功能是其无法提供的。对于这些 OpenStack 提供不了的功能，我们就需要使用外部系统或者设备来填补功能上的空白。硬件的负载均衡器就是此类设备中的一种，需要它来分配负载或者完成部分特定的上层功能。请注意，直到 Icehouse 版本发布之时，OpenStack 中的动态路由功能仍未成熟，且可能需要使用外部的设备或者 OpenStack 中专门的服务实例来实现。OpenStack 联网提供了隧道功能，然而该功能却只能在 OpenStack 联网所管理的范围内使用。如果需要将隧道从 OpenStack 的范围扩展至另外一个区域或者外部系统，则有必要在 OpenStack 之外使用能够将隧道或者整个覆盖网络映射到外部的隧道的其它隧道管理系统来实现隧道功能。OpenStack 目前并不提供网络资源配额功能。如果需要对网络资源进行配额管理，则有必要在 OpenStack 之外采用其它的服务质量管理机制。很多类似的情形下，将需要类似流量整形或者其它网络功能的解决方案。</para>
    <para>根据所选择的设计的不同，OpenStack 联网方式有可能完全无法支持所需要的<glossterm baseform="Layer-3 network">三层网络</glossterm>功能。如果选择提供商网络模式而不运行三层网络代理程序，则您必须安装一个外部的路由器来提供到外部系统的三层网络连接。</para>
    <para>毫无疑问，在大规模部署中肯定需要用到编排服务。编排模块能够按照模板中的定义来分配映射到租户网络上的网络资源以及完成端口创建，还能够分配浮动 IP 地址。如果有需要使用编排模块来定义和管理网络资源，则建议一开始的设计就应该包含编排模块以满足用户的需要。</para>
    <section xml:id="design-impacts">
      <title>对设计的影响</title>
    <para>有很多类型的因素能够影响到网络型的 OpenStack 架构。有些因素与一般的使用场景的架构所需要考虑的因素是相同的，而另外还有一些特别的与网络需求相关的负载会影响网络设计的决定。</para>
    <para>其中一个需要决定的事情是是否使用网络地址转换(NAT)以及在哪里具体实施。假如需要的是浮动 IP 地址而不是使用固定的公共地址的话，那么就需要使用 NAT。这种情况发生在依赖 IP 端点的网络管理应用上。一个例子是 DHCP 中继需要知道真正的 DHCP 服务器的 IP。这些情况下，让基础设施能够自动将目标 IP 地址应用到新的实例之上，要比为每个新实例都重新配置传统的或者外部的系统要来得容易。</para>
    <para>为 OpenStack 联网所管理的浮动地址而使用的 NAT 通常都在宿主机上，不过也有其它用途的 NAT 会在别的地方运行。假如出现 IPv4 地址不足的情况，有两种常见的方式来在 OpenStack 之外减轻这个问题的影响。其一是以一个实例的方式在 OpenStack 内部，或者使用外部的负载均衡方案来运行负载均衡器。内部的场景下，诸如 HAproxy 这一类的负载均衡软件，能由 OpenStack 联网的负载均衡即服务(LBaas)进行管理。具体说来，这是在使用 HAproxy 实例的双路连接将外部网络和所有内容服务器所在的租户私有网络连接起来的同时，对虚拟 IP(VIP)进行管理来实现的。使用外部的负载均衡方案的场景下，负载均衡器需要为该虚拟 IP 服务，并且通过外部的方法连接到租户的覆盖网络之中，或者通过私有地址路由到其中。</para>
    <para>另外一种可能有用的 NAT 是协议 NAT。某些情况下，可能需要在实例中只使用 IPv6 地址，然后让一个实例或者外部的服务来提供基于 NAT 的转换技术，比如说 NAT64 和 DNS64。这使得实例都有全局可达的 IPv6 地址，同时只在必要的情况下，或者以共享的方式使用 IPv4 地址。</para>
    <para>云应用的负载类型会影响底层网络架构的设计。假如负载需要网络级别上的冗余，那么路由和交换架构就得适应这种需求。基于不同网络硬件的选择，硬件的性能差异，以及要部署的是哪种联网模型这些因素，有不同的方法可以提供这种冗余。比如说链路聚合(LAG)或者热备份路由器协议(HSRP)的使用。还有个考虑因素是部署 OpenStack 联网还是传统联网(nova-network)，以及如果使用 OpenStack 联网方式的话，要选择哪些插件。如果使用外部的系统，必须将联网方式配置成能够运行带有提供商网络配置方式的<glossterm baseform="Layer-2 network">二层网络</glossterm>。比如说，可能需要使用 HSRP 来终结三层网络连接。</para>
    <para>根据目标负载的不同，覆盖网络可能是，也有可能不是推荐的配置。当应用的网络连接是小规模的，短暂的或者非连续的，运行一个动态的覆盖网络能产生相当于它承载的网络包一样多的流量，也有可能引起足够的延迟从而产生其它的问题。同样也会影响到产生到覆盖网络上的流量的设备，在大多数部署中该设备是是宿主机。这将导致每秒网络包数和每秒产生连接的速度这些相关的指标发生性能降低。</para>
    <para>覆盖网络还有另外一个可能使得其合适或者不合适特定的负载的选项。默认情况下，覆盖网络是以一种完全网状的形式存在的，但是由于这对于某些负载来说可能会产生多余的开销，所以有时可能要关掉这个功能。相对的，其它的负载也有可能能在这种情况下正常工作。比如说，大多数的 web 服务应用在完全网状的覆盖网络上没有什么严重的问题，但是一些网络监控工具或者存储复制的负载，在这种情况下却有可能因为吞吐量或者多余的广播流量而产生性能问题。</para>
    <para>很多人忽略了一个很重要的设计因素：三层网络协议的选择。虽然 OpenStack 一开始只有 IPv4 的支持，但是现在 OpenStack 的联网已经支持 IPv6 以及同时使用两种协议的双栈网络。请注意直到 Icehouse 版本之时，这只包括了无状态地址自动配置的机制。但是，对无状态和有状态的 DHCPv6 和不需要使用 NAT 的 IPv6 浮动地址的支持的工作正在进行中。由于使用 IPv6 以及例如 NAT64、DNS64 或者 <glossterm>6to4</glossterm> 之类的 IPv6 和 IPv4 的相互转换机制的这些选项变得可行，使得承载某些类型的负载变得可能。这将改变单栈情景下的地址计划的需求，并且，过渡性的 IPv6 部署也能够减少对于 IPv4 地址的需求。</para>
    <para>直到 Icehouse 版本的发布，OpenStack 对于动态路由的支持都很有限。然而，通过集成第三方的解决方案，包括网络设备、硬件节点以及实例，有很多的选择可以在云中实现路由。有一些类型的负载只需要在三层网络的终结点处设置好静态路由和默认的网关的情况下就可以很好地工作了。大多数情况下这是足够的，但是有些使用场景却需要至少一种动态路由协议的使用，如果不是要求多种协议同时使用的话。在一个 OpenStack 部署中，使得某种内部网关协议(IGP)对于实例可用，能够让服务使用单播路由注入作为地理位置或者故障转移机制成为可能。其它的应用则可能直接参与到路由协议之中，作为一个类似 looking glass 一样的被动的观察者，或者作为一个路由反射器这样的主动参与者。由于一个实例可能具有大量的计算和内存资源，存放整个未分区的路由表并使用它来提供类似于给其它应用使用的网络路径可见性，或者监控工具等的服务，并不会是什么大问题。</para>
    <para>路径最大传输单元(MTU)故障不怎么出名，但却难以判断。MTU 必须足够大以满足传输正常流量，覆盖网络的开销以及需要的三层网络协议。当假如外部的隧道时，MTU 包的大小被减小。这种情况下，您可能需要注意下最大可能的 MTU 大小，因为有些系统被配置为忽略或者丢弃用于路径 MTU 发现的网络包。</para>
    </section>
    <section xml:id="tunables">
        <title>可调联网组件</title>
        <para>为网络资源密集型的负载进行设计时，需要考虑包括 MTU 和 QoS 在内的，与 OpenStack 架构设计有关的可配置的联网组件。有些负载，基于其对传输大块数据的需求，可能要求比平常更大的 MTU。当为类似视频流传输以及存储复制等应用提供网络服务时，建议在可能的情况下，确保 OpenStack 硬件节点以及支撑网络设备都为巨型帧进行了配置。这使得对可用的带宽的利用率更高。对巨型帧的配置需要在整个网络包会经过的路径上都完成。假如其中一个网络组件不能够处理巨型帧，则整个路径将会恢复到使用默认 MTU。</para>
        <para>服务质量(QoS)同样对网络资源密集型的复杂有着很大的影响，通过为可能受低网络性能影响的因而具有更高优先级的网络包提供及时的服务。在类似于 IP 语音(VoIP)这种服务中，差异化服务几乎是是保证正常运营的必要条件。QoS 还能以相反的方式用以将负载混合，避免诸如备份服务、视频会议或者文件共享等低优先级但却需要高带宽的应用阻塞其它服务正常运营所需要的带宽。可以通过将用于文件存储的带宽标记为类似“尽力而为”或者“清道夫”之类的更低优先级，以允许更高优先级的流量通过。在云中的区域可能分布在不同的地理地点的情况下，可能需要相应地作出计划，使用 WAN 优化来对抗延迟以及丢包。</para>
    </section>
</section>