<?xml version="1.0" ?><para version="5.0" xml:lang="zh" xmlns="http://docbook.org/ns/docbook">
  <!-- Warning: Do not edit this file. It is automatically
     generated and your changes will be overwritten.
     The tool to do so lives in openstack-doc-tools repository. -->
  <table rules="all" xml:id="config_table_ironic_conductor">
    <caption>Description of conductor configuration options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <th>Configuration option = Default value</th>
        <th>描述</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th colspan="2">[conductor]</th>
      </tr>
      <tr>
        <td><option>api_url</option> = <replaceable>无</replaceable></td>
        <td>(StrOpt) URL of Ironic API service. If not set ironic can get the current value from the keystone service catalog.</td>
      </tr>
      <tr>
        <td><option>check_provision_state_interval</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Interval between checks of provision timeouts, in seconds.</td>
      </tr>
      <tr>
        <td><option>configdrive_swift_container</option> = <replaceable>ironic_configdrive_container</replaceable></td>
        <td>(StrOpt) Name of the Swift container to store config drive data. Used when configdrive_use_swift is True.</td>
      </tr>
      <tr>
        <td><option>configdrive_use_swift</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Whether to upload the config drive to Swift.</td>
      </tr>
      <tr>
        <td><option>deploy_callback_timeout</option> = <replaceable>1800</replaceable></td>
        <td>(IntOpt) Timeout (seconds) for waiting callback from deploy ramdisk. 0 - unlimited.</td>
      </tr>
      <tr>
        <td><option>force_power_state_during_sync</option> = <replaceable>True</replaceable></td>
        <td>(BoolOpt) During sync_power_state, should the hardware power state be set to the state recorded in the database (True) or should the database be updated based on the hardware state (False).</td>
      </tr>
      <tr>
        <td><option>heartbeat_interval</option> = <replaceable>10</replaceable></td>
        <td>(IntOpt) Seconds between conductor heart beats.</td>
      </tr>
      <tr>
        <td><option>heartbeat_timeout</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) since the last check-in of a conductor.</td>
      </tr>
      <tr>
        <td><option>node_locked_retry_attempts</option> = <replaceable>3</replaceable></td>
        <td>(IntOpt) Number of attempts to grab a node lock.</td>
      </tr>
      <tr>
        <td><option>node_locked_retry_interval</option> = <replaceable>1</replaceable></td>
        <td>(IntOpt) Seconds to sleep between node lock attempts.</td>
      </tr>
      <tr>
        <td><option>periodic_max_workers</option> = <replaceable>8</replaceable></td>
        <td>(IntOpt) Maximum number of worker threads that can be started simultaneously by a periodic task. Should be less than RPC thread pool size.</td>
      </tr>
      <tr>
        <td><option>power_state_sync_max_retries</option> = <replaceable>3</replaceable></td>
        <td>(IntOpt) During sync_power_state failures, limit the number of times Ironic should try syncing the hardware node power state with the node power state in DB</td>
      </tr>
      <tr>
        <td><option>send_sensor_data</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Enable sending sensor data message via the notification bus</td>
      </tr>
      <tr>
        <td><option>send_sensor_data_interval</option> = <replaceable>600</replaceable></td>
        <td>(IntOpt) Seconds between conductor sending sensor data message to ceilometer via the notification bus.</td>
      </tr>
      <tr>
        <td><option>send_sensor_data_types</option> = <replaceable>ALL</replaceable></td>
        <td>(ListOpt) List of comma separated metric types which need to be sent to Ceilometer. The default value, &quot;ALL&quot;, is a special value meaning send all the sensor data.</td>
      </tr>
      <tr>
        <td><option>sync_local_state_interval</option> = <replaceable>180</replaceable></td>
        <td>(IntOpt) When conductors join or leave the cluster, existing conductors may need to update any persistent local state as nodes are moved around the cluster. This option controls how often, in seconds, each conductor will check for nodes that it should &quot;take over&quot;. Set it to a negative value to disable the check entirely.</td>
      </tr>
      <tr>
        <td><option>sync_power_state_interval</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Interval between syncing the node power state to the database, in seconds.</td>
      </tr>
      <tr>
        <td><option>workers_pool_size</option> = <replaceable>100</replaceable></td>
        <td>(IntOpt) The size of the workers greenthread pool.</td>
      </tr>
    </tbody>
  </table>
</para>