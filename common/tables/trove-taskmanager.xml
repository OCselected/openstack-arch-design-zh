<?xml version="1.0" ?><para version="5.0" xml:lang="zh" xmlns="http://docbook.org/ns/docbook">
  <!-- Warning: Do not edit this file. It is automatically
     generated and your changes will be overwritten.
     The tool to do so lives in openstack-doc-tools repository. -->
  <table rules="all" xml:id="config_table_trove_taskmanager">
    <caption>Description of taskmanager configuration options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <th>Configuration option = Default value</th>
        <th>描述</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th colspan="2">[DEFAULT]</th>
      </tr>
      <tr>
        <td><option>cloudinit_location</option> = <replaceable>/etc/trove/cloudinit</replaceable></td>
        <td>(StrOpt) Path to folder with cloudinit scripts.</td>
      </tr>
      <tr>
        <td><option>datastore_manager</option> = <replaceable>无</replaceable></td>
        <td>(StrOpt) Manager class in the Guest Agent, set up by the Taskmanager on instance provision.</td>
      </tr>
      <tr>
        <td><option>datastore_registry_ext</option> = <replaceable>{}</replaceable></td>
        <td>(DictOpt) Extension for default datastore managers. Allows the use of custom managers for each of the datastores supported by Trove.</td>
      </tr>
      <tr>
        <td><option>exists_notification_ticks</option> = <replaceable>360</replaceable></td>
        <td>(IntOpt) Number of report_intervals to wait between pushing events (see report_interval).</td>
      </tr>
      <tr>
        <td><option>exists_notification_transformer</option> = <replaceable>无</replaceable></td>
        <td>(StrOpt) Transformer for exists notifications.</td>
      </tr>
      <tr>
        <td><option>reboot_time_out</option> = <replaceable>120</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a server reboot.</td>
      </tr>
      <tr>
        <td><option>resize_time_out</option> = <replaceable>600</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a server resize.</td>
      </tr>
      <tr>
        <td><option>restore_usage_timeout</option> = <replaceable>36000</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a Guest instance restored from a backup to become active.</td>
      </tr>
      <tr>
        <td><option>revert_time_out</option> = <replaceable>600</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a server resize revert.</td>
      </tr>
      <tr>
        <td><option>server_delete_time_out</option> = <replaceable>60</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a server delete.</td>
      </tr>
      <tr>
        <td><option>state_change_wait_time</option> = <replaceable>180</replaceable></td>
        <td>(IntOpt) Maximum time (in seconds) to wait for a state change.</td>
      </tr>
      <tr>
        <td><option>update_status_on_fail</option> = <replaceable>True</replaceable></td>
        <td>(BoolOpt) Set the service and instance task statuses to ERROR when an instance fails to become active within the configured usage_timeout.</td>
      </tr>
      <tr>
        <td><option>usage_sleep_time</option> = <replaceable>5</replaceable></td>
        <td>(IntOpt) Time to sleep during the check for an active Guest.</td>
      </tr>
      <tr>
        <td><option>use_heat</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Use Heat for provisioning.</td>
      </tr>
      <tr>
        <td><option>use_nova_server_config_drive</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Use config drive for file injection when booting instance.</td>
      </tr>
      <tr>
        <td><option>use_nova_server_volume</option> = <replaceable>False</replaceable></td>
        <td>(BoolOpt) Whether to provision a Cinder volume for the Nova instance.</td>
      </tr>
      <tr>
        <td><option>verify_swift_checksum_on_restore</option> = <replaceable>True</replaceable></td>
        <td>(BoolOpt) Enable verification of Swift checksum before starting restore. Makes sure the checksum of original backup matches the checksum of the Swift backup file.</td>
      </tr>
    </tbody>
  </table>
</para>